def calculate_calories(data: dict) -> dict:
    age = int(data["age"])
    sex = data["sex"]
    height = int(data["height"])
    weight = int(data["weight"])
    activity = data["activity"]
    goal = data["goal"]

    if sex == "male":
        metabolism = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        metabolism = 10 * weight + 6.25 * height - 5 * age - 161

    if activity == "inactive":
        calorie_intake = metabolism * 1.2
        proteins = weight * 1.5
    elif activity == "light":
        calorie_intake = metabolism * 1.38
        proteins = weight * 1.5
    elif activity == "moderate":
        calorie_intake = metabolism * 1.55
        proteins = weight * 2
    elif activity == "high":
        calorie_intake = metabolism * 1.73
        proteins = weight * 2.5
    elif activity == "very-high":
        calorie_intake = metabolism * 2.2
        proteins = weight * 3

    if goal == "loss":
        calorie_intake -= (calorie_intake * 15) / 100
    elif goal == "gain":
        calorie_intake += (calorie_intake * 15) / 100

    fats = weight * 1.3
    carbons = (calorie_intake - proteins * 4.1 - fats * 9.3) / 4.1

    water = weight * 30

    return {
        "calorie_intake": int(calorie_intake),
        "proteins": int(proteins),
        "fats": int(fats),
        "carbons": int(carbons),
        "water": int(water),
    }


def build_registration_message(data):
    lines = []
    lines.append("üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n")
    lines.append(f"üï∞ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}")
    lines.append(f"üìè –¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç: {data['height']}")
    lines.append(f"üí™ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {data['weight']}")
    lines.append(f"üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {_match_activity(data['activity'])}")
    lines.append(f"üéØ –¶–µ–ª—å: {_match_goal(data['goal'])}")
    lines.append(f"üî• –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏: {data['calorie_intake']} –∫–∫–∞–ª")
    lines.append(f"üçó –ë–µ–ª–∫–∏: {data['proteins']} –≥")
    lines.append(f"ü•ë –ñ–∏—Ä—ã: {data['fats']} –≥")
    lines.append(f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {data['carbons']} –≥")
    lines.append(f"üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {data['water']} –º–ª\n")
    lines.append(
        "–í–∞–∂–Ω–æ: —Ä–∞—Å—á—ë—Ç—ã –Ω–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞/–¥–∏–µ—Ç–æ–ª–æ–≥–∞."
    )
    return "\n".join(lines)


def _match_activity(activity):
    mapping = {
        "inactive": "—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        "light": "–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "moderate": "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "high": "–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        "very-high": "–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    }
    return mapping.get(activity, activity)


def _match_goal(goal):
    mapping = {
        "loss": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
        "maintain": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
        "gain": "–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
    }
    return mapping.get(goal, goal)
