import app.keyboards as kb
import app.database.requests as rq
from app.utils import calculate_calories, build_registration_message, match_activity
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder


router = Router()


# region States


class RegistrationStates(StatesGroup):
    waiting_age = State()
    waiting_sex = State()
    waiting_height = State()
    waiting_weight = State()
    waiting_activity = State()
    waiting_goal = State()
    waiting_loss_bucket = State()
    waiting_loss_rate = State()
    completed = State()


class WaterStates(StatesGroup):
    waiting_custom_value = State()


# endregion


# region General commands


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.reply(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –í–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ –ö–ë–ñ–£. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç.",
    )
    await state.update_data(telegram_id=message.from_user.id)
    await state.set_state(RegistrationStates.waiting_age)


@router.message(Command("recommend_food"))
async def handleRecommendFood(message: Message):
    await message.answer(
        "–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ –ø–æ–µ—Å—Ç—å üçΩ\n–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω) ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É –∏–¥–µ–∏."
    )


@router.message(Command("plan"))
async def handlePlan(message: Message):
    await message.answer(
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è üìÖ\n–û–ø–∏—à–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω–∞ –Ω–µ–¥–µ–ª—é") –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.'
    )


@router.message(Command("add_meal"))
async def handleAddMeal(message: Message):
    await message.answer(
        '–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É üçΩ\n–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å—ä–µ–ª–∏ –∏ —Å–∫–æ–ª—å–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–≤—Å—è–Ω–∫–∞ 60 –≥").'
    )


@router.message(Command("delete_meals"))
async def handleDeleteMeals(message: Message):
    entries = await rq.list_selected_recipes(message.from_user.id)
    if not entries:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        return
    builder = InlineKeyboardBuilder()
    for e in entries:
        builder.button(text=f"#{e.id}", callback_data=f"del_recipe:{e.id}")
    builder.adjust(3)
    await message.answer(
        "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ üóë\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
    )


@router.message(Command("show_today_calories"))
async def handleShowTodayCalories(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer(
            "–Ø –Ω–µ –Ω–∞—à—ë–ª –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start."
        )
        return
    meals_sum = await rq.get_today_recipes_sum(message.from_user.id)
    water_sum = await rq.get_today_water_sum(message.from_user.id)
    remaining_cal = max(user.calorie_intake - meals_sum["calories"], 0)
    remaining_p = max(user.proteins - meals_sum["proteins"], 0)
    remaining_f = max(user.fats - meals_sum["fats"], 0)
    remaining_c = max(user.carbons - meals_sum["carbons"], 0)
    remaining_water = max(user.water - water_sum, 0)
    text_lines = []
    text_lines.append("–ú–æ—ë –ö–ë–ñ–£ ‚úÖ")
    text_lines.append(
        f"üî• –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π: {remaining_cal} –∫–∫–∞–ª (–∏–∑ {user.calorie_intake})"
    )
    text_lines.append(f"üçó –û—Å—Ç–∞–ª–æ—Å—å –±–µ–ª–∫–æ–≤: {remaining_p} –≥ (–∏–∑ {user.proteins})")
    text_lines.append(f"ü•ë –û—Å—Ç–∞–ª–æ—Å—å –∂–∏—Ä–æ–≤: {remaining_f} –≥ (–∏–∑ {user.fats})")
    text_lines.append(f"üçö –û—Å—Ç–∞–ª–æ—Å—å —É–≥–ª–µ–≤–æ–¥–æ–≤: {remaining_c} –≥ (–∏–∑ {user.carbons})")
    text_lines.append(f"üíß –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–¥—ã: {remaining_water} –º–ª (–Ω–æ—Ä–º–∞ {user.water})")
    await message.answer("\n".join(text_lines))


@router.message(Command("help"))
async def handleHelp(message: Message):
    await message.answer(
        "–ü–æ–º–æ—â—å üõ†\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/recipes, /add_meal, /delete_meals, /show_today_calories, /recommend_food,\n"
        "/plan, /track_water, /my_goal, /change_products, /help, /privacy"
    )


@router.message(Command("privacy"))
async def handlePrivacy(message: Message):
    await message.answer(
        "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n–ú—ã —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ, –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ö–ë–ñ–£."
    )


@router.message(Command("change_products"))
async def handleChangeProducts(message: Message):
    await message.answer(
        '–ó–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üîÑ\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–º–∞–π–æ–Ω–µ–∑ ‚Üí –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç").'
    )


# endregion


# region Recipes


@router.message(Command("recipes"))
async def handleRecipes(message: Message):
    await rq.seed_recipes_if_empty()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏:", reply_markup=kb.recipes_categories_keyboard
    )


@router.callback_query(lambda c: c.data and c.data.startswith("recipes:"))
async def recipes_by_category(query: CallbackQuery):
    await query.answer()
    _, category = query.data.split(":")
    user = await rq.get_user(query.from_user.id)
    if not user:
        await query.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start")
        return
    max_cal = user.calorie_intake
    recipes = await rq.get_recipes_by_category_and_limit(category, max_cal)
    if not recipes:
        await query.message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    builder = InlineKeyboardBuilder()
    for r in recipes:
        builder.button(
            text=f"{r.title} ({r.calories} –∫–∫–∞–ª)", callback_data=f"pick_recipe:{r.id}"
        )
    builder.adjust(1)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=builder.as_markup())


@router.callback_query(lambda c: c.data and c.data.startswith("pick_recipe:"))
async def pick_recipe(query: CallbackQuery):
    await query.answer()
    _, recipe_id = query.data.split(":")
    await rq.add_recipe_selection(query.from_user.id, int(recipe_id))
    await query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç!")


@router.callback_query(lambda c: c.data and c.data.startswith("del_recipe:"))
async def delete_recipe_entry(query: CallbackQuery):
    await query.answer()
    _, entry_id = query.data.split(":")
    await rq.delete_selected_recipe(int(entry_id), query.from_user.id)
    await query.message.answer("–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª—ë–Ω")


# endregion


# region Water


@router.message(Command("track_water"))
async def handleTrackWater(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user:
        await message.answer(
            f"–í—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß\n–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user.water} –º–ª.",
            reply_markup=kb.track_water_keyboard,
        )
    else:
        await message.answer(
            "–í—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß\n–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start."
        )


@router.callback_query(lambda c: c.data and c.data.startswith("water:"))
async def water_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    _, value = query.data.split(":")
    if value == "custom":
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤–æ–¥—ã –≤ –º–ª (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        await state.set_state(WaterStates.waiting_custom_value)
        return
    amount_ml = int(value)
    await rq.add_water_log(query.from_user.id, amount_ml)
    await query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—ë–º –≤–æ–¥—ã")


@router.message(WaterStates.waiting_custom_value)
async def water_custom_value(message: Message, state: FSMContext):
    text = message.text.strip().replace(" ", "")
    if not text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 300"
        )
        return
    amount_ml = int(text)
    await rq.add_water_log(message.from_user.id, amount_ml)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—ë–º –≤–æ–¥—ã")
    await state.clear()


# endregion


# region Goal


@router.message(Command("my_goal"))
async def handleMyGoal(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start")
        return
    await message.answer(
        "–ú–æ—è —Ü–µ–ª—å üéâ\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
        f"–†–æ—Å—Ç: {user.height}\n"
        f"–í–µ—Å: {user.weight}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {match_activity(user.activity)}\n"
        f"–¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {user.calorie_intake} –∫–∫–∞–ª",
        reply_markup=kb.change_goal_button_kb,
    )


@router.callback_query(lambda c: c.data == "change_goal:open")
async def open_change_goal(query: CallbackQuery):
    await query.answer()
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=kb.goal_change_keyboard
    )


@router.callback_query(lambda c: c.data and c.data.startswith("change_goal:"))
async def change_goal_apply(query: CallbackQuery):
    await query.answer()
    _, new_goal = query.data.split(":")
    if new_goal == "open":
        return
    user = await rq.get_user(query.from_user.id)
    if not user:
        await query.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start")
        return
    data = {
        "age": user.age,
        "sex": user.sex,
        "height": user.height,
        "weight": user.weight,
        "activity": user.activity,
        "goal": new_goal,
    }
    results = calculate_calories(data)
    await rq.update_user_goal(
        query.from_user.id,
        goal=new_goal,
        calorie_intake=results["calorie_intake"],
        proteins=results["proteins"],
        fats=results["fats"],
        carbons=results["carbons"],
    )
    await query.message.answer(
        "–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ\n"
        f"–ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {results['calorie_intake']} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {results['proteins']} –≥, –ñ–∏—Ä—ã: {results['fats']} –≥, –£–≥–ª–µ–≤–æ–¥—ã: {results['carbons']} –≥"
    )


# endregion


# region Registration


@router.message(RegistrationStates.waiting_age)
async def age_callback(message: Message, state: FSMContext):
    age_str = message.text
    try:
        age_int = int(age_str)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 16-100")
        return
    if not (16 <= age_int <= 100):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 16-100")
        return
    await state.update_data(age=age_int)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª.", reply_markup=kb.sex_keyboard)
    await state.set_state(RegistrationStates.waiting_sex)


@router.callback_query(lambda c: c.data and c.data.startswith("sex:"))
async def sex_callback(query: CallbackQuery, state: FSMContext):
    await query.answer()
    _, sex = query.data.split(":")
    await state.update_data(sex=sex)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö")
    await state.set_state(RegistrationStates.waiting_height)


@router.message(RegistrationStates.waiting_height)
async def height_callback(message: Message, state: FSMContext):
    height_str = message.text
    try:
        height_int = int(height_str)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 120‚Äì230")
        return
    if not (120 <= height_int <= 230):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 120‚Äì230")
        return
    await state.update_data(height=height_int)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö")
    await state.set_state(RegistrationStates.waiting_weight)


@router.message(RegistrationStates.waiting_weight)
async def msg_weight(message: Message, state: FSMContext):
    weight_str = message.text.strip().replace(",", ".")
    try:
        weight_int = int(weight_str)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 35‚Äì250")
        return
    if not (35 <= weight_int <= 250):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 35‚Äì250")
        return
    await state.update_data(weight=weight_int)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", reply_markup=kb.activity_keyboard
    )
    await state.set_state(RegistrationStates.waiting_activity)


@router.callback_query(lambda c: c.data and c.data.startswith("activity:"))
async def cb_activity(query: CallbackQuery, state: FSMContext):
    await query.answer()
    _, activity = query.data.split(":")
    await state.update_data(activity=activity)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å", reply_markup=kb.goal_keyboard)
    await state.set_state(RegistrationStates.waiting_goal)


@router.callback_query(lambda c: c.data and c.data.startswith("goal:"))
async def goal_callback(query: CallbackQuery, state: FSMContext):
    await query.answer()
    _, goal = query.data.split(":")
    await state.update_data(goal=goal)
    data = await state.get_data()
    results = calculate_calories(data)
    combined_data = {**data, **results}
    message_text = build_registration_message(combined_data)
    await rq.set_user(combined_data)
    await query.message.answer(message_text, parse_mode="HTML")
    await state.clear()


# endregion
