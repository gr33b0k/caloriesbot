import asyncio
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from app.handlers import router
from app.database.models import async_main

load_dotenv()


async def main():
    await async_main()
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    dp = Dispatcher()
    dp.include_router(router)
    await bot.set_my_commands(
        [
            BotCommand(command="recipes", description="–í—ã–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç üòú"),
            # BotCommand(command="add_meal", description="–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É üçΩ"),
            BotCommand(command="delete_meals", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ üóë"),
            BotCommand(command="show_today_calories", description="–ú–æ—ë –ö–ë–ñ–£ ‚úÖ"),
            # BotCommand(command="recommend_food", description="–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ –ø–æ–µ—Å—Ç—å üçΩ"),
            # BotCommand(command="plan", description="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è üìÖ"),
            BotCommand(command="track_water", description="–í—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß"),
            BotCommand(command="my_goal", description="–ú–æ—è —Ü–µ–ª—å üéâ"),
            # BotCommand(command="change_products", description="–ó–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üîÑ"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å üõ†"),
            BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"),
        ]
    )
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")
